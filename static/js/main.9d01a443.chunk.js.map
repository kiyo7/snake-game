{"version":3,"sources":["utils/index.js","constants/index.js","components/Navigation.js","components/Field.js","components/Button.js","components/ManipulationPanel.js","hooks/useSnakeGame.js","App.js","reportWebVitals.js","index.js"],"names":["getFoodPosition","fieldSize","excludes","x","Math","floor","random","y","some","item","initFields","snake","fields","i","cols","Array","fill","push","food","console","log","initialPosition","initialValues","Difficulty","GameStatus","Object","freeze","init","playing","suspended","gameover","Direction","up","right","left","down","DirectionKeyCodeMap","37","38","39","40","OppositeDirection","Delta","Navigation","length","difficulty","onChangeDifficulty","upVisibility","downVisibility","className","onClick","Field","map","row","column","Button","status","onStart","onRestart","onStop","ManipulationPanel","onChange","icon","faArrowLeft","faArrowUp","faArrowDown","faArrowRight","timer","unsubscribe","clearInterval","useSnakeGame","useState","setFields","body","setBody","setStatus","direction","setDirection","setDifficulty","tick","setTick","useEffect","setInterval","handleMoving","updateDirection","useCallback","newDirection","updateDifficulty","handleKeyDown","e","keyCode","document","addEventListener","removeEventListener","delta","newPosition","position","isCollision","isEatingMySelf","newBody","removingTrack","pop","unshift","start","stop","reload","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9d01a443.chunk.js","sourcesContent":["export const getFoodPosition = (fieldSize, excludes) => {\n  //餌をランダムな場所に出現させる\n\n  while (true) {\n    const x = Math.floor(Math.random() * (fieldSize - 1 - 1)) + 1;\n    const y = Math.floor(Math.random() * (fieldSize - 1 - 1)) + 1;\n    const conflict = excludes.some((item) => item.x === x && item.y === y);\n\n    if (!conflict) {\n      return { x, y };\n    }\n  }\n};\nexport const initFields = (fieldSize, snake) => {\n  //fieldを作る\n  const fields = [];\n  for (let i = 0; i < fieldSize; i++) {\n    const cols = new Array(fieldSize).fill(\"\");\n    fields.push(cols);\n  }\n  fields[snake.x][snake.y] = \"snake\";\n  const food = getFoodPosition(fieldSize, [snake]);\n  console.log(food);\n  fields[food.y][food.x] = \"food\";\n\n  return fields;\n};\n\n//壁に当たったかの判定 マイナスor FieldSizeを超える場合\nexport const isCollision = (fieldSize, position) => {\n  if (position.y < 0 || position.x < 0) {\n    return true;\n  }\n\n  if (position.y > fieldSize - 1 || position.x > fieldSize - 1) {\n    return true;\n  }\n  return false;\n};\n\nexport const isEatingMySelf = (fields, position) => {\n  //自分を食べてしまった時の処理\n  return fields[position.y][position.x] === \"snake\";\n};\n","import { initFields } from \"../utils/index\";\n\nconst fieldSize = 35;\nexport const initialPosition = { x: 17, y: 17 };\nexport const initialValues = initFields(fieldSize, initialPosition);\nexport const defaultInterval = 100;\nexport const defaultDifficulty = 3;\n\nexport const Difficulty = [1000, 500, 100, 50, 10];\n\nexport const GameStatus = Object.freeze({\n  init: \"init\",\n  playing: \"playing\",\n  suspended: \"suspended\",\n  gameover: \"gameover\",\n});\n\nexport const Direction = Object.freeze({\n  up: \"up\",\n  right: \"right\",\n  left: \"left\",\n  down: \"down\",\n});\n\nexport const DirectionKeyCodeMap = Object.freeze({\n  37: Direction.left,\n  38: Direction.up,\n  39: Direction.right,\n  40: Direction.down,\n});\n\nexport const OppositeDirection = Object.freeze({\n  up: \"down\",\n  right: \"left\",\n  left: \"right\",\n  down: \"up\",\n});\n//それぞれの方向に進めるようにする\nexport const Delta = Object.freeze({\n  up: { x: 0, y: -1 },\n  right: { x: 1, y: 0 },\n  left: { x: -1, y: 0 },\n  down: { x: 0, y: 1 },\n});\n","import React from \"react\";\nimport { defaultDifficulty, Difficulty } from \"../constants/index\";\n\nconst Navigation = ({\n  length,\n  difficulty = defaultDifficulty,\n  onChangeDifficulty,\n}) => {\n  const upVisibility = difficulty < Difficulty.length ? \"\" : \"is-hidden\";\n  const downVisibility = difficulty > 1 ? \"\" : \"is-hidden\";\n  const onUpDifficulty = () => onChangeDifficulty(difficulty + 1);\n  const onDownDifficulty = () => onChangeDifficulty(difficulty - 1);\n  return (\n    <div className=\"navigation\">\n      <div className=\"navigation-item\">\n        <span className=\"navigation-label\">Length: </span>\n        <div className=\"navigation-item-number-container\">\n          <div className=\"num-board\">{length}</div>\n        </div>\n      </div>\n      <div className=\"navigation-item\">\n        <span className=\"navigation-label\">Difficulty: </span>\n        <div className=\"navigation-item-number-container\">\n          <span className=\"num-board\">{difficulty}</span>\n          <div className=\"difficulty-button-container\"></div>\n          <div\n            className={`difficulty-button difficulty-up ${upVisibility}`}\n            onClick={onUpDifficulty}\n          ></div>\n          <div\n            className={`difficulty-button difficulty-down ${downVisibility}`}\n            onClick={onDownDifficulty}\n          ></div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default Navigation;\n","import React from \"react\";\n\nconst Field = ({ fields }) => {\n  //fieldは全体 35 * 35\n  return (\n    <div className=\"field\">\n      {fields.map((row) => {\n        //rowは一列 35個\n        return row.map((column) => {\n          //columnはrowから1つずつとクラスを与える\n          return <div className={`dots ${column}`}></div>;\n        });\n      })}\n    </div>\n  );\n};\n\nexport default Field;\n","import React from \"react\";\nimport { GameStatus } from \"../constants/index\";\nconst Button = ({ status, onStart, onRestart, onStop }) => {\n  return (\n    <div className=\"button\">\n      {status === GameStatus.gameover && (\n        <button className=\"btn btn-gameover\" onClick={onRestart}>\n          gameover\n        </button>\n      )}\n      {status === GameStatus.init && (\n        <button className=\"btn btn-init\" onClick={onStart}>\n          start\n        </button>\n      )}\n      {status === GameStatus.suspended && (\n        <button className=\"btn btn-suspended\" onClick={onStart}>\n          start\n        </button>\n      )}\n      {status === GameStatus.playing && (\n        <button className=\"btn btn-playing\" onClick={onStop}>\n          stop\n        </button>\n      )}\n    </div>\n    //if文の書き方 &&の前が条件式 trueの時に&&以降が実行される\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faArrowLeft,\n  faArrowUp,\n  faArrowDown,\n  faArrowRight,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { Direction } from \"../constants/index\";\nconst ManipulationPanel = ({ onChange }) => {\n  const onUp = () => onChange(Direction.up);\n  const onRight = () => onChange(Direction.right);\n  const onLeft = () => onChange(Direction.left);\n  const onDown = () => onChange(Direction.down);\n\n  return (\n    <div className=\"manipulation-panel\">\n      <button className=\"manipulation-btn btn btn-left\" onClick={onLeft}>\n        <FontAwesomeIcon icon={faArrowLeft} />\n      </button>\n      <div>\n        <button className=\"manipulation-btn btn btn-up\" onClick={onUp}>\n          <FontAwesomeIcon icon={faArrowUp} />\n        </button>\n        <button className=\"manipulation-btn btn btn-down\" onClick={onDown}>\n          <FontAwesomeIcon icon={faArrowDown} />\n        </button>\n      </div>\n      <button className=\"manipulation-btn btn btn-right\" onClick={onRight}>\n        <FontAwesomeIcon icon={faArrowRight} />\n      </button>\n    </div>\n  );\n};\n\nexport default ManipulationPanel;\n","import { useCallback, useEffect, useState } from \"react\";\nimport {\n  defaultInterval,\n  defaultDifficulty,\n  initialPosition,\n  initialValues,\n  Delta,\n  Difficulty,\n  Direction,\n  DirectionKeyCodeMap,\n  GameStatus,\n  OppositeDirection,\n} from \"../constants/index\";\n\nimport {\n  initFields,\n  isCollision,\n  isEatingMySelf,\n  getFoodPosition,\n} from \"../utils/index\";\n\nlet timer = null;\n\nconst unsubscribe = () => {\n  if (!timer) {\n    return;\n  }\n  clearInterval(timer); //タイマーの削除\n};\n\nconst useSnakeGame = () => {\n  const [fields, setFields] = useState(initialValues);\n  const [body, setBody] = useState([]);\n  const [status, setStatus] = useState(GameStatus.init);\n  const [direction, setDirection] = useState(Direction.up);\n  const [difficulty, setDifficulty] = useState(defaultDifficulty);\n  const [tick, setTick] = useState(0);\n\n  useEffect(() => {\n    setBody([initialPosition]); // positionの初期値を初回レンダリング時に設定\n    const interval = Difficulty[difficulty - 1];\n    timer = setInterval(() => {\n      // ゲームの中の時間を管理する\n      setTick((tick) => tick + 1);\n    }, interval);\n    return unsubscribe; //コンポーネントが消えるタイミングで実行（今回は、サイトが更新された時）\n  }, [difficulty]);\n\n  useEffect(() => {\n    if (body.length === 0 || status !== GameStatus.playing) {\n      //スネークの長さが0,stateがplaying意外ならreturn\n      return;\n    }\n    const canContinue = handleMoving();\n    if (!canContinue) {\n      setStatus(GameStatus.gameover);\n    }\n  }, [tick]);\n  // console.log(status); //tickを使い常にゲームの状態を把握している 同行のconsoleで見たら理解しやすい\n\n  const start = () => setStatus(GameStatus.playing); // ゲームスタート\n\n  const stop = () => setStatus(GameStatus.suspended); //一時停止\n\n  //GameOver時のリセット処理\n  const reload = () => {\n    timer = setInterval(() => {\n      setTick((tick) => tick + 1);\n    }, defaultInterval);\n    setDirection(Direction.up);\n    setStatus(GameStatus.init);\n    setBody([initialPosition]);\n    setFields(initFields(35, initialPosition));\n  };\n\n  //パフォーマンス向上のためのuseCallback レンダー毎に読み込むのではなく第2引数の[direction, status]に変更があった時のみ関数を読み込む\n  const updateDirection = useCallback(\n    (newDirection) => {\n      if (status !== GameStatus.playing) {\n        return direction;\n      }\n      // console.log(direction); //console 進んでいた方向\n      // console.log(newDirection); // console 次に入力された方向\n      if (OppositeDirection[direction] === newDirection) {\n        //オブジェクトには[]でもアクセス可能\n        //例：upならOppositeはdownこの例では左辺はdown 次に入力された方向がdownなら無効 進行方向の逆は入力できないって感じ\n        return;\n      }\n      setDirection(newDirection);\n    },\n    [direction, status]\n  );\n\n  const updateDifficulty = useCallback(\n    (difficulty) => {\n      if (status !== GameStatus.init) {\n        //難易度の変更はinit時のみ受付\n        return;\n      }\n      if (difficulty < 1 || difficulty > Difficulty.length) {\n        return;\n      }\n      setDifficulty(difficulty);\n    },\n    [status]\n  );\n\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      const newDirection = DirectionKeyCodeMap[e.keyCode];\n\n      if (!newDirection) {\n        //カーソル以外のキーはundefindを返す\n        return;\n      }\n      updateDirection(newDirection);\n    };\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown); //パフォーマンス向上のためコンポーネントが死んだ時イベントリスナを解除する\n  }, [updateDirection]);\n\n  const handleMoving = () => {\n    const { x, y } = body[0]; //bodyはスネークの長さ\n    const delta = Delta[direction];\n    const newPosition = {\n      x: x + delta.x,\n      y: y + delta.y,\n    };\n    if (\n      isCollision(fields.length, newPosition) ||\n      isEatingMySelf(fields, newPosition)\n    ) {\n      //GameOverかの確認\n      return false;\n    }\n    const newBody = [...body]; //破壊的変更を加える前にコピーをとる\n    if (fields[newPosition.y][newPosition.x] !== \"food\") {\n      const removingTrack = newBody.pop();\n      fields[removingTrack.y][removingTrack.x] = \"\";\n    } else {\n      const food = getFoodPosition(fields.length, [...newBody, newPosition]);\n      fields[food.y][food.x] = \"food\"; //2回目以降の餌を出現させる\n    }\n    fields[newPosition.y][newPosition.x] = \"snake\"; //スネークの長さを増やす\n    newBody.unshift(newPosition); //配列の先頭にスネークを加える（破壊的変更）\n    setBody(newBody);\n    setFields(fields);\n    return true;\n  };\n\n  return {\n    body,\n    difficulty,\n    fields,\n    status,\n    start,\n    stop,\n    reload,\n    updateDirection,\n    updateDifficulty,\n  };\n};\n\nexport default useSnakeGame;\n","import React from \"react\";\nimport Navigation from \"./components/Navigation\";\nimport Field from \"./components/Field\";\nimport Button from \"./components/Button\";\nimport ManipulationPanel from \"./components/ManipulationPanel\";\nimport useSnakeGame from \"./hooks/useSnakeGame\";\n\nfunction App() {\n  const {\n    body,\n    difficulty,\n    fields,\n    start,\n    stop,\n    reload,\n    status,\n    updateDirection,\n    updateDifficulty,\n  } = useSnakeGame();\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <div className=\"title-container\">\n          <h1 className=\"title\">Snake Game</h1>\n        </div>\n        <Navigation\n          length={body.length}\n          difficulty={difficulty}\n          onChangeDifficulty={updateDifficulty}\n        />\n      </header>\n      <main className=\"main\">\n        <Field fields={fields} />\n      </main>\n      <footer className=\"footer\">\n        <Button\n          status={status}\n          onStop={stop}\n          onStart={start}\n          onRestart={reload}\n        />\n        <ManipulationPanel onChange={updateDirection} />\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}